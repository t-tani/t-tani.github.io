<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on t-tani blog</title>
    <link>https://t-tani.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on t-tani blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 21 Mar 2019 21:09:34 +0900</lastBuildDate>
    
	<atom:link href="https://t-tani.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>0x01:ReverseEngineering Basic2</title>
      <link>https://t-tani.github.io/0x01_reverseengineering_basic/</link>
      <pubDate>Thu, 21 Mar 2019 21:09:34 +0900</pubDate>
      
      <guid>https://t-tani.github.io/0x01_reverseengineering_basic/</guid>
      <description>自分の備忘のためリバースエンジニアリングでバイナリを分析するときに基礎をまとめる。基本的にはリバースエンジニアリング上で必要な理解に留める。
C++の開発環境の準備 C++で書かれた PE ファイルの理解を深めるため、Windows での開発環境を整える。OS 情報は以下の通り。
 OS 名: Microsoft Windows 10 Pro OS バージョン: 10.0.17134 N/A ビルド 17134  IDE Visual Studio Code : https://azure.microsoft.com/ja-jp/products/visual-studio-code/
今まで Atom を使っていたが、日本語入力のバグに耐えきれなく乗り換え。試しに使ってみたところ、使いやすかった。
コンパイラ コンパイラを入れるため、以下をインストール。
 Visual Studio Community 2017 : https://visualstudio.microsoft.com/ja/downloads/  C++によるデスクトップ開発   Msys2 : http://www.msys2.org/  インストールファイル : msys2-x86_64-20180531.exe pacman -S base-devel pacman -S mingw-w64-x86_64-toolchain pacman -S mingw-w64-i686-toolchain    Visual Studio Code の設定 TBU
C++のクラスとリバースエンジニアリング C++を逆アセンブルした際には、アセンブラコードにはメンバー関数であることやクラスの宣言部であることは明示されていない。メモリの使用量や関数の構造から、クラスであることを判断する必要がある。簡単な C++のコードをコンパイル/逆アセンブルして this ポインターやクラスのメンバー関数の呼び出し、メンバー変数の呼ばれ方を確認してみる。なお、MSVS2017 と GCC でコンパイルした PE ファイルを利用する。</description>
    </item>
    
  </channel>
</rss>